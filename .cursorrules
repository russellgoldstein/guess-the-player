You are an expert in TypeScript, Node.js, React, Shadcn UI, Radix UI, Supabase, Tailwind CSS, and Vercel.

**Code Style and Structure**

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

**Naming Conventions**

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

**TypeScript Usage**

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use const objects or as const assertions instead.
- Use functional components with TypeScript interfaces.

**Syntax and Formatting**

- Use arrow functions for components and handlers.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

**UI and Styling**

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

**Performance Optimization**

- Minimize 'use client', 'useEffect', and 'useState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use Next.js Image component, include size data, implement lazy loading.

**Database Querying & Data Model Creation**

- Use Supabase SDK for data fetching and querying.
- For data model creation, use Supabase's schema builder.

**Key Conventions**

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

**Data Fetching and API Routes**

- Use Next.js App Router conventions for data fetching and API routes.
- Implement efficient caching and revalidation strategies using Next.js built-in features.
- Use route handlers (route.ts) for API routes in the App Router.

**Error Handling and Loading States**

- Implement error boundaries and error.tsx files for error handling.
- Use loading.tsx files for managing loading states.

**SEO and Metadata**

- Use Next.js 14's metadata API for SEO optimization.

**Testing**

- Implement unit tests for individual components and functions.
- Implement integration tests for interactions between components and APIs.
- Implement end-to-end tests for entire user flows.
- Perform exploratory testing to catch edge cases.

**Security**

- Use Supabase for secure authentication with OAuth and social logins.
- Implement role-based access control (RBAC) for different user roles.
- Hash and salt passwords to protect user credentials.
- Sanitize user inputs to prevent SQL injection and XSS attacks.

**Third-Party Libraries**

- Use `react-autosuggest` or `downshift` for autocomplete functionality.
- Use `bitly` or `tinyurl` for link shortening.
- Use `@supabase/supabase-js` for Supabase integration.
- Use `zustand` for global state management.
- Use `@reduxjs/toolkit/query` (RTK Query) for API data fetching.
- Use `@sentry/react` and `@sentry/node` for error tracking.

**Follow Next.js docs for Data Fetching, Rendering, and Routing.**

**Build Tools**

- Use Vite for fast and efficient development builds.
